{
  "name": "thriftrw",
  "version": "1.0.0-beta3",
  "description": "thrift encoding/decoding using bufrw",
  "keywords": [],
  "author": {
    "name": "Lei Zhao",
    "email": "leizha@uber.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/uber/thriftrw.git"
  },
  "main": "index.js",
  "homepage": "https://github.com/uber/thriftrw",
  "bugs": {
    "url": "https://github.com/uber/thriftrw/issues",
    "email": "leizha@uber.com"
  },
  "contributors": [
    {
      "name": "Lei Zhao"
    }
  ],
  "dependencies": {
    "bufrw": "^0.9.4",
    "error": "^5.1.1"
  },
  "devDependencies": {
    "coveralls": "^2.10.0",
    "istanbul": "^0.3.5",
    "itape": "^1.5.0",
    "lint-trap": "^1.0.0",
    "opn": "^1.0.1",
    "pre-commit": "0.0.9",
    "tape": "^2.0.0",
    "uber-licence": "^1.2.0",
    "debug": "^2.1.2",
    "lodash": "^3.5.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/uber/thriftrw/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "add-licence": "uber-licence",
    "check-cover": "istanbul check-coverage --branches=100 --lines=100 --functions=100",
    "check-licence": "uber-licence --dry",
    "check-ls": "npm ls 1>/dev/null",
    "cover": "npm run test-cover -s && npm run check-cover -s",
    "lint": "lint-trap .",
    "test": "npm run check-ls -s && npm run lint -s && npm run cover -s",
    "test-cover": "istanbul cover --report html --print detail -- test/index.js",
    "trace": "itape test/index.js --trace",
    "travis": "npm run cover -s && istanbul report lcov && ((cat coverage/lcov.info | coveralls) || exit 0)",
    "view-cover": "opn ./coverage/index.html"
  },
  "engines": {
    "node": ">= 0.10.x"
  },
  "pre-commit": [
    "check-licence",
    "test"
  ],
  "pre-commit.silent": true,
  "itape": {
    "trace": {
      "debuglog": [
        "thriftrw"
      ],
      "leakedHandles": {
        "timeout": 5001,
        "debugSockets": true
      },
      "formatStack": true
    }
  },
  "uber-ngen-version": "5.2.0",
  "readme": "# thriftrw\n\n<!--\n    [![build status][build-png]][build]\n    [![Coverage Status][cover-png]][cover]\n    [![Davis Dependency status][dep-png]][dep]\n-->\n\n<!-- [![NPM][npm-png]][npm] -->\n\nthrift encoding/decoding using bufrw\n\n## Example\n\n```js\nvar thriftrw = require(\"thriftrw\");\nvar bufrw = require('bufrw');\n\nvar struct = new thriftrw.TStruct();\nstruct.fields.push(\n    new thriftrw.TField(thriftrw.TYPE.STRING, 1, new Buffer('hello')\n);\n\nvar buf = bufrw.toBuffer(thriftrw.TStructRW, struct);\nconsole.log('created a binary buffer of thrift encoded struct', buf);\n\nvar struct2 = bufrw.fromBuffer(thriftrw.TStructRW, buf);\nconsole.log('created a TStruct from a binary buffer', struct2);\n```\n\n## Installation\n\n`npm install thriftrw`\n\n## Tests\n\n`npm test`\n\n## NPM scripts\n\n - `npm run add-licence` This will add the licence headers.\n - `npm run cover` This runs the tests with code coverage\n - `npm run lint` This will run the linter on your code\n - `npm test` This will run the tests.\n - `npm run trace` This will run your tests in tracing mode.\n - `npm run travis` This is run by travis.CI to run your tests\n - `npm run view-cover` This will show code coverage in a browser\n\n## Contributors\n\n - Lei Zhao\n\n## MIT Licenced\n\n  [build-png]: https://secure.travis-ci.org/uber/thriftrw.png\n  [build]: https://travis-ci.org/uber/thriftrw\n  [cover-png]: https://coveralls.io/repos/uber/thriftrw/badge.png\n  [cover]: https://coveralls.io/r/uber/thriftrw\n  [dep-png]: https://david-dm.org/uber/thriftrw.png\n  [dep]: https://david-dm.org/uber/thriftrw\n  [test-png]: https://ci.testling.com/uber/thriftrw.png\n  [tes]: https://ci.testling.com/uber/thriftrw\n  [npm-png]: https://nodei.co/npm/thriftrw.png?stars&downloads\n  [npm]: https://nodei.co/npm/thriftrw\n",
  "readmeFilename": "README.md",
  "_id": "thriftrw@1.0.0-beta3",
  "_shasum": "48e8580babbc9e8f497fb39bf85f543de8b4b210",
  "_resolved": "http://archive.local.uber.internal/npm/thriftrw/thriftrw-1.0.0-beta3.tgz",
  "_from": "thriftrw@1.0.0-beta3"
}
