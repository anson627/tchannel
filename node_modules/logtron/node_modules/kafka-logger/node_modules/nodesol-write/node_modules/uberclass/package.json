{
  "name": "uberclass",
  "description": "A class framework based on JavaScriptMVC $.Class and John Resig's Simple JavaScript inheritance.",
  "version": "1.0.1",
  "homepage": "http://daffl.github.com/uberclass",
  "repository": {
    "type": "git",
    "url": "git://github.com/daffl/uberclass.git"
  },
  "author": {
    "name": "David Luecke",
    "email": "daff@neyeon.de",
    "url": "http://neyeon.com"
  },
  "main": "lib/class",
  "directories": {
    "lib": "lib"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "engines": {
    "node": "*"
  },
  "readme": "Uberclass\n========\n\nUberclass is a class framework based on [JavaScriptMVC $.Class](http://javascriptmvc.com/docs.html#&who=jQuery.Class)\nand [John Resig's Simple JavaScript inheritance](http://ejohn.org/blog/simple-javascript-inheritance/) for NodeJS.\nIt encourages a hybrid approach between functional and object oriented programming.\n\nFeatures:\n\n-\tPrototypal inheritance\n-\tStatic inheritance\n-\tSetup and initialization methods\n-\tEasy callback creation\n\n \nInstall and require\n-------------------\n\nYou can either use npm\n\n\tnpm install uberclass\n\t\nOr clone the [github repository](https://github.com/daffl/ueberclass).\n\n \nCreating a Class\n----------------\n\nThe following creates a Monster class with static, and prototype members.\nThe prototype init is called as the constructor. Every time a monster instance is created,\nthe static count is incremented:\n \n\tvar Class = require('ueberclass');\n\t\n\tvar Monster = Class.extend(/* @static */ {\n\t  count: 0\n\t},\n\t/* @prototype */\n\t{\n\t  init: function( name ) {\n\t\n\t    // saves name on the monster instance\n\t    this.name = name;\n\t\n\t    // sets the health\n\t    this.health = 10;\n\t\n\t    // increments count\n\t    this.Class.count++;\n\t  },\n\t  eat: function( smallChildren ){\n\t    this.health += smallChildren;\n\t  },\n\t  fight: function() {\n\t    this.health -= 2;\n\t  }\n\t});\n\t\n\thydra = new Monster('hydra');\n\tdragon = new Monster('dragon');\n\t\n\tconsole.log(hydra.name)\t\t// -> hydra\n\tconsole.log(Monster.count)\t// -> 2\n\t\n\thydra.eat(2);\n\tconsole.log(hydra.health);\t// health = 12\n\t\n\tdragon.fight();    \n\tconsole.log(dagon.health);\t// health = 8\n\n\t\nInheritance\n-----------\n \nWhen a class is extended, all static and prototype properties are available on the new class.\nIf you overwrite a function, you can call the base class's function by calling this._super.\nLets create a SeaMonster class. SeaMonsters are less efficient at eating small children,\nbut more powerful fighters. \n \n\tvar SeaMonster = Monster.extend({\n\t\teat : function(smallChildren)\n\t\t{\n\t\t\tthis._super(smallChildren / 2);\n\t\t},\n\t\tfight : function()\n\t\t{\n\t\t\tthis.health -= 1;\n\t\t}\n\t});\n\t\n\tvar lochNess = new SeaMonster('Loch Ness');\n\t\n\tlochNess.eat(4);\n\tconsole.log(\"Loch Ness ate. Health: \" + lochNess.health); // -> 12\n\t\n\tlochNess.fight();\n\tconsole.log(\"Loch Ness fought. Health: \" + lochNess.health); // -> 11\n\n\t\nCallbacks\n---------\n \nClass provides a proxy function that returns a callback to a method that will always have _this_ set\nto the class or instance of the class. The following example creates a ResponseHandler class that \ntakes the reponse text and the responses header options as constructor arguments and provides\nit's handle method as a callback to the http.createServer function: \n \n\tvar Handler = Class.extend({\n\t\tinit : function(content, headers)\n\t\t{\n\t\t\tthis._headers = headers;\n\t\t\tthis._content = content;\n\t\t},\n\t\t\n\t\t/* Prototype */\n\t\twriteHead : function(response)\n\t\t{\n\t\t\tresponse.writeHead(200, this._headers);\n\t\t},\n\t\t\n\t\thandle : function(request, response)\n\t\t{\n\t\t\tthis.writeHead(response);\n\t\t\tresponse.end(this._content);\n\t\t}\n\t});\n\t\n\tvar handler = new Handler('Hello World from ResponseHandler\\n', { 'Content-Type': 'text/plain' });\n\t\n\tvar http = require('http');\n\thttp.createServer(handler.proxy('handle')).listen(1337, \"127.0.0.1\");\n\n\nExporting\n---------\n\nJust add the class object to your module export:\n\n\t// my_module.js\n\tmodule.exports.MyClass = Class.extend({ /* Static */ }, { /* Prototype */ });\n\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/daffl/uberclass/issues"
  },
  "_id": "uberclass@1.0.1",
  "_shasum": "b01c9e4e7b2ed7039c412884e2330613ee8993f7",
  "_resolved": "http://archive.local.uber.internal/npm/uberclass/uberclass-1.0.1.tgz",
  "_from": "uberclass@1.0.1"
}
